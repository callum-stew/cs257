1S - Convert waxpby to AVX and remove conditional as all values of alpha=1
        1.17s => 0.82
2S - OMP parallel in waxpby
        0.82 => 0.37
3F - Added func to waxpby for when beta=-1
        No change
4F - Added OMP parallel to waxpby second for loop
        No change (loop only has upto 4 calls)
5S - Covert ddot to AVX and remove conditional as no time benefit.
        Tried using AVX/SSE functions to get hsum of __m256d but 
        there was not time benefit and storing to array is simpler.
        double r_array[4] __attribute__((aligned(32))); was marginaly faster than _mm_malloc() and _mm_free
        0.81 => 0.46
6S - OMP parallel in ddot
        0.46 => 0.15
        Used v_t_total variable so they are not constantly locking each other up
7F - Used AVX with sparsemv could not align data so used loadu and i32gather for indexing
        11.39 => 11.49
7.5F - Used OMP on 7
        11.49 => 3.15
8S - Unloop inner for loop in sparsemv (loopFactor=4)
        11.39 => 8.50
9S - Unloop inner for loop in sparsemv (loopFactor=8)
        8.64 => 8.15
10S - OMP parralel sparsemv outer loop
        8.64 => 2.45
11S - Loop unrole with intrinsics on ddot (loopFactor = 2)
        faster at 200?
12F - Loop unrole with intrinsics on waxpby (loopFactor = 2)
        No change
13
14? - Converted to float instead of double. modified intrinsics.
        ddot: minor slowdown
        waxpby: 0.36 => 0.16
        sparsemv: 2.45 => 2.26
        But there is a considerable loss in accuracy.


check if this
#pragma omp for reduction(+:local_result)
for (int i=loopN; i<n; i++) {
  local_result += x[i]*y[i];
}
avges better in ddot











1S - Added parallel for to sparsemv.c outer for loop
2S - Added parallel for to waxpby.c
3S - Added parallel for to ddot.c | variable difference but minnor
4F - Added m256d vector to ddot.c | not as big a time gain as 3 so reverting to 3
5F - Tried to run m256d and parralel in ddot.c and best case senario waas no time gain.
6? - loop unrole sparsemv.c







#include <immintrin.h>

#include "ddot.h"

/**
 * @brief Compute the dot product of two vectors
 * 
 * @param n Number of vector elements
 * @param x Input vector
 * @param y Input vector
 * @param result Pointer to scalar result value
 * @return int 0 if no error
 */
int ddot (const int n, const double * const x, const double * const y, double * const result) {  
  int i;
  int loopFactor = 4;
  int loopN = (n/loopFactor)*loopFactor;
  
  double local_result = 0.0;
  __m256d v_local_result = _mm256_set1_pd(0.0);
  double *local_result_array = _mm_malloc(sizeof(double) * 4, 32);

  if (y==x){
    for (i=0; i<loopN; i+=loopFactor) {
      __m256d v_xi = _mm256_load_pd(x+i);
      v_local_result = _mm256_add_pd(_mm256_mul_pd(v_xi, v_xi), v_local_result);
    }
    for (; i<n; i++) {
      local_result += x[i]*x[i];
    }

  } else {
    for (i=0; i<loopN; i+=loopFactor) {
      __m256d v_xi = _mm256_load_pd(x+i);
      __m256d v_yi = _mm256_load_pd(y+i);
      v_local_result = _mm256_add_pd(_mm256_mul_pd(v_xi, v_yi), v_local_result);
    }
    for (; i<n; i++) {
      local_result += x[i]*y[i];
    }
  }
  _mm256_store_pd(local_result_array, v_local_result);
  local_result += local_result_array[0]+local_result_array[1]+local_result_array[2]+local_result_array[3];

  *result = local_result;

  _mm_free(local_result_array);

  return 0;
}


#include "ddot.h"

/**
 * @brief Compute the dot product of two vectors
 * 
 * @param n Number of vector elements
#include <immintrin.h>
 * @param x Input vector
 * @param y Input vector
 * @param result Pointer to scalar result value
 * @return int 0 if no error
 */
int ddot (const int n, const double * const x, const double * const y, double * const result) {  
  double local_result = 0.0;
  #pragma omp parallel reduction(+:local_result)
  {
    if (y==x){
      #pragma omp for nowait
      for (int i=0; i<n; i++) {
        local_result += x[i]*x[i];
      }

    } else {
      #pragma omp for nowait
      for (int i=0; i<n; i++) {
        local_result += x[i]*y[i];
      }
    }
  }

  *result = local_result;
  return 0;
}



for (int i=0; i< nrow; i++) {
      double sum = 0.0;
      const double * const cur_vals = (const double * const) A->ptr_to_vals_in_row[i];
      const int * const cur_inds = (const int * const) A->ptr_to_inds_in_row[i];
      const int cur_nnz = (const int) A->nnz_in_row[i];
      int j;


      for (j=0; j<(cur_nnz/4)*4; j+=4) {
        sum += (cur_vals[j]*x[cur_inds[j]]) \
             + (cur_vals[j+1]*x[cur_inds[j+1]]) \
             + (cur_vals[j+2]*x[cur_inds[j+2]]) \
             + (cur_vals[j+3]*x[cur_inds[j+3]]);
      }

      for (; j<cur_nnz; j++) {
        sum += (cur_vals[j]*x[cur_inds[j]]);
      }
      y[i] = sum;
  }



#include <stdlib.h>
#include <ctype.h>
#include <assert.h>
#include <math.h>
#include <stdio.h>
#include <immintrin.h>

#include "sparsemv.h"

/**
 * @brief Compute matrix vector product (y = A*x)
 * 
 * @param A Known matrix
 * @param x Known vector
 * @param y Return vector
 * @return int 0 if no error
 */
int sparsemv(struct mesh *A, const double * const x, double * const y)
{
  const int nrow = (const int) A->local_nrow;

  for (int i=0; i<nrow; i++) {
      double sum = 0.0;
      __m256d v_sum = _mm256_set1_pd(0.0);
      //__m256d v_sum_total = _mm256_set1_pd(0.0);

      const double * const cur_vals = (const double * const) A->ptr_to_vals_in_row[i];
      const int * const cur_inds = (const int * const) A->ptr_to_inds_in_row[i];
      const int cur_nnz = (const int) A->nnz_in_row[i];

      const int loopFactor = 4;
      const int loopN = (cur_nnz/loopFactor)*loopFactor;

      for (int j=0; j<loopN; j+=loopFactor) {
        __m256d v_val = _mm256_load_pd(cur_vals+j);
        __m256d v_x = _mm256_set1_pd(0.0);//_mm256_load_pd(x+cur_inds[j]);
        v_sum = _mm256_add_pd(_mm256_mul_pd(v_val, v_x), v_sum);
      }

      for (int j=loopN; j<cur_nnz; j++) {
        sum += cur_vals[j]*x[cur_inds[j]];
      }

      double * sum_array = _mm_malloc(sizeof(double)*4, 32);
      _mm256_store_pd(sum_array, v_sum);
      sum += sum_array[0] + sum_array[1] + sum_array[2] + sum_array[3];
      _mm_free(sum_array);

      y[i] = sum;
  }

  return 0;
}
